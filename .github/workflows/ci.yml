name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        # port mapping inside Actions runner: container 8000 -> host 8000
        ports:
          - 8000:8000
        options: >-
          --health-cmd='curl -sS http://localhost:8000 >/dev/null || exit 1'
          --health-interval=2s --health-timeout=2s --health-retries=10

    env:
      # Integration tests should read this env var to know where DDB is
      DYNAMODB_ENDPOINT: http://localhost:8000

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'maven'

      - name: Cache Maven local repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Wait for DynamoDB service to be healthy
        # optional safety wait - service health is already defined; this is extra
        run: |
          for i in {1..10}; do
            curl -sS http://localhost:8000 || sleep 1
          done

      - name: Run unit tests
        run: mvn -B -DskipITs=true test
        # If you use JUnit XML files and want to display them in GH, publish with upload-artifact or use check runner integrations

      - name: Run integration tests (failsafe)
        run: mvn -B -DskipITs=false verify

      - name: Build (package)
        run: mvn -B -DskipTests package

      - name: Upload built jar
        uses: actions/upload-artifact@v4
        with:
          name: atlas-capstone-jar
          path: target/*.jar

      # Optional: build & push Docker image to Docker Hub (uncomment + set secrets)
      #- name: Log in to DockerHub
      #  uses: docker/login-action@v2
      #  with:
      #    username: ${{ secrets.DOCKERHUB_USERNAME }}
      #    password: ${{ secrets.DOCKERHUB_PASSWORD }}
      #
      #- name: Build and push Docker image
      #  uses: docker/build-push-action@v4
      #  with:
      #    push: true
      #    tags: ${{ secrets.DOCKERHUB_USERNAME }}/atlas-app:${{ github.sha }}

      - name: Upload test reports (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: target/*reports*/**/*.xml
